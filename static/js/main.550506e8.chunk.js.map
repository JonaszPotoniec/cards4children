{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","files","numberOfImages","combinations","settings","doodle","setSettings","bind","loadFile","removeFile","changeNumber","calculateCombinations","setting","event","console","log","target","checked","temp","this","value","setState","concat","URL","createObjectURL","isPrime","DobbleCards","map","e","x","i","length","num","set","k","j","combs","head","tailcombs","push","slice","n","cards","crd","symbols","sym","cat","splice","className","images","React","Component","Configuration","convertToPng","convertToAllPng","node","document","getElementById","htmlToImage","toPng","then","dataUrl","link","createElement","download","href","click","Array","from","children","id","type","onChange","min","key","onClick","src","alt","max","step","padding","gap","Preview","combination","index","style","gridTemplateColumns","Math","ceil","sqrt","gridTemplateRows","gridGap","links","linkIndex","transform","random","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAIMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,eAAgB,EAChBC,aAAc,GACdC,SAAU,CACR,IAAO,EACPC,QAAQ,IAIZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,sBAAwB,EAAKA,sBAAsBJ,KAA3B,gBAhBZ,E,yEAmBPK,EAAQC,GAAQC,QAAQC,IAAIF,EAAMG,OAAOC,SACnD,IAAIC,EAAOC,KAAKnB,MAAMI,SACI,UAAvBS,EAAMG,OAAOI,MACZF,EAAKN,GAAWC,EAAMG,OAAOC,QAE7BC,EAAKN,GAAWC,EAAMG,OAAOI,MACjCD,KAAKE,SAAS,CACZjB,SAAUc,M,+BAILL,GACPM,KAAKE,SAAS,CACZpB,MAAOkB,KAAKnB,MAAMC,MAAMqB,OAAOC,IAAIC,gBAAgBX,EAAMG,OAAOf,MAAM,MACrEkB,KAAKR,yB,8CAGc,IAAD,OACY,GAA9BQ,KAAKnB,MAAMI,SAASC,QAAkBc,KAAKM,QAAQN,KAAKnB,MAAME,eAAiB,GAC9EiB,KAAKE,SAAS,CACVlB,aAAegB,KAAKO,YAAYP,KAAKnB,MAAME,gBAAiByB,KAAI,SAACC,GAAO,OAAOA,EAAED,KAAI,SAACE,EAAGC,GAAO,OAAO,EAAK9B,MAAMC,MAAM4B,EAAI,EAAK7B,MAAMC,MAAM8B,gBAGjJZ,KAAKE,SAAS,CACdlB,aAAcgB,KAAKhB,aAAagB,KAAKnB,MAAMC,MAAOkB,KAAKnB,MAAME,oB,8BAIzD8B,GACJ,IAAI,IAAIF,EAAI,EAAGA,EAAIE,EAAKF,IACpB,GAAGE,EAAMF,IAAM,EAAG,OAAO,EAC7B,OAAOE,EAAM,I,mCAGNC,EAAKC,GAChB,IAAIJ,EAAGK,EAAGC,EAAOC,EAAMC,EACvB,GAAIJ,EAAID,EAAIF,QAAUG,GAAK,EACvB,MAAO,GAEX,GAAIA,IAAMD,EAAIF,OACV,MAAO,CAACE,GAEZ,GAAU,IAANC,EAAS,CAET,IADAE,EAAQ,GACHN,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IACxBM,EAAMG,KAAK,CAACN,EAAIH,KAEpB,OAAOM,EAGX,IADAA,EAAQ,GACHN,EAAI,EAAGA,EAAIG,EAAIF,OAASG,EAAI,EAAGJ,IAGhC,IAFAO,EAAOJ,EAAIO,MAAMV,EAAGA,EAAE,GACtBQ,EAAYnB,KAAKhB,aAAa8B,EAAIO,MAAMV,EAAI,GAAII,EAAI,GAC/CC,EAAI,EAAGA,EAAIG,EAAUP,OAAQI,IAC9BC,EAAMG,KAAKF,EAAKf,OAAOgB,EAAUH,KAGzC,OAAOC,I,kCAIGK,GAIN,IAHA,IAAIC,EAAQ,GAGHC,EAAM,EAAGA,EAAMF,EAAGE,IAAO,CAE9B,IADA,IAAIC,EAAU,CAAC,GACNC,EAAM,EAAGA,EAAMJ,EAAGI,IACvBD,EAAQL,KAAKI,GAAOF,EAAE,GAAKI,GAE/BH,EAAMH,KAAKK,EAAQJ,SAIvB,IAAK,IAAIM,EAAM,EAAGA,EAAML,EAAGK,IACvB,IAASH,EAAM,EAAGA,EAAMF,EAAE,EAAGE,IAAO,CAEhC,IADIC,EAAU,CAACE,GACND,EAAM,EAAGA,EAAMJ,EAAGI,IACvBD,EAAQL,KAAK,EAAIM,GAAOJ,EAAE,KAAOK,EAAI,IAAMD,EAAI,GAAKF,IAAQF,EAAE,IAElEC,EAAMH,KAAKK,EAAQJ,SAI3B,OADJ1B,QAAQC,IAAI2B,GACDA,I,iCAIFZ,GACT,IAAIZ,EAAOC,KAAKnB,MAAMC,MACtBiB,EAAK6B,OAAOjB,EAAG,GAEfX,KAAKE,SAAS,CACZpB,MAAOiB,GACNC,KAAKR,yB,mCAGGkB,GACXV,KAAKE,SAAS,CACZnB,eAAgB2B,EAAEb,OAAOI,OACxBD,KAAKR,yB,+BAIR,OACE,yBAAKqC,UAAU,OACb,kBAAC,EAAD,CACEC,OAAQ9B,KAAKnB,MAAMC,MACnBO,SAAUW,KAAKX,SACfC,WAAYU,KAAKV,WACjBC,aAAcS,KAAKT,aACnBR,eAAgBiB,KAAKnB,MAAME,eAC3BI,YAAaa,KAAKb,YAClBF,SAAUe,KAAKnB,MAAMI,WAEvB,kBAAC,EAAD,CACED,aAAcgB,KAAKnB,MAAMG,aACzBD,eAAgBiB,KAAKnB,MAAME,eAC3BE,SAAUe,KAAKnB,MAAMI,gB,GA1Ib8C,IAAMC,WAiJlBC,E,YACJ,WAAYrD,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,IAET,EAAKoD,aAAe,EAAKA,aAAa9C,KAAlB,gBACpB,EAAK+C,gBAAkB,EAAKA,gBAAgB/C,KAArB,gBANN,E,4EAUjB,IAAIgD,EAAOC,SAASC,eAAe,WAEnCC,IAAYC,MAAMJ,GACfK,MAAK,SAACC,GACL,IAAIC,EAAON,SAASO,cAAc,KAClCD,EAAKE,SAAW,cAChBF,EAAKG,KAAOJ,EACZC,EAAKI,a,wCAKTC,MAAMC,KAAKZ,SAASC,eAAe,WAAWY,UAAU1C,KAAI,SAAC4B,EAAMzB,GACjE4B,IAAYC,MAAMJ,GACfK,MAAK,SAACC,GACL,IAAIC,EAAON,SAASO,cAAc,KAClCD,EAAKE,SAAW,UAAUlC,EAAE,GAAG,OAC/BgC,EAAKG,KAAOJ,EACZC,EAAKI,gB,+BAKH,IAAD,OACP,OACE,yBAAKI,GAAG,qBACN,6BACE,6BACE,2BAAOC,KAAK,OAAOC,SAAUrD,KAAKpB,MAAMS,aAG5C,oDACmB,2BAAO+D,KAAK,SAASE,IAAK,EAAGrD,MAAOD,KAAKpB,MAAMG,eAAgBsE,SAAUrD,KAAKpB,MAAMW,gBAEvG,yBAAK4D,GAAG,gBAEJnD,KAAKpB,MAAMkD,OAAOtB,KAAI,SAACC,EAAGE,GACxB,OACE,yBAAK4C,IAAK5C,GACR,4BAAQ6C,QAAS,kBAAM,EAAK5E,MAAMU,WAAWqB,KAA7C,KACA,yBAAK8C,IAAKhD,EAAGiD,IAAK,gBAAgB/C,SAM5C,0BAAMwC,GAAG,eAAT,YACW,2BAAOC,KAAK,QAASE,IAAK,EAAGK,IAAK,EAAGC,KAAM,GAAK3D,MAAOD,KAAKpB,MAAMK,SAAS4E,QAASR,SAAUrD,KAAKpB,MAAMO,YAAYC,KAAKY,KAAM,aAD3I,QAEO,2BAAOoD,KAAK,QAASE,IAAK,EAAGK,IAAK,GAAIC,KAAM,GAAK3D,MAAOD,KAAKpB,MAAMK,SAAS6E,IAAKT,SAAUrD,KAAKpB,MAAMO,YAAYC,KAAKY,KAAM,SAFpI,uBAGsB,2BAAOoD,KAAK,WAAWnD,MAAOD,KAAKpB,MAAMK,SAASC,OAAQmE,SAAUrD,KAAKpB,MAAMO,YAAYC,KAAKY,KAAM,aAE5H,6BACE,4BAAQwD,QAASxD,KAAKkC,aAAcL,UAAU,cAA9C,iBACA,4BAAQ2B,QAASxD,KAAKmC,gBAAiBN,UAAU,cAAjD,4B,GAhEkBE,IAAMC,WAuE5B+B,E,iLAEM,IAAD,OAEP,OACE,yBAAKZ,GAAG,WAEJnD,KAAKpB,MAAMI,aAAawB,KAAI,SAACwD,EAAaC,GACxC,OAAO,yBAAKV,IAAKU,EAAOpC,UAAU,OAAOqC,MAAO,CAC5CC,oBAAqB,UAAUC,KAAKC,KAAKD,KAAKE,KAAK,EAAK1F,MAAMG,iBAAiB,UAC/EwF,iBAAkB,UAAUH,KAAKC,KAAKD,KAAKE,KAAK,EAAK1F,MAAMG,iBAAiB,UAC5EyF,QAAS,EAAK5F,MAAMK,SAAS6E,IAAM,KACnCD,QAAS,EAAKjF,MAAMK,SAAS4E,QAAU,OAGvCG,EAAYxD,KAAI,SAACiE,EAAOC,GACtB,OAAO,yBAAKjB,IAAKgB,EAAOlB,IAAKmB,EAAWhB,IAAI,QAAQQ,MAAO,CAACS,UAAW,UAAUP,KAAKC,KAAmB,IAAdD,KAAKQ,UAAc,sB,GAhB1G7C,IAAMC,WA2BbrD,IC3OKkG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9C,SAASC,eAAe,SD6H3C,kBAAmB8C,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.550506e8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport htmlToImage from 'html-to-image';\n\nclass App extends React.Component  {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      numberOfImages: 1,\n      combinations: [],\n      settings: {\n        \"gap\": 2,\n        doodle: false\n      }\n    }\n\n    this.setSettings = this.setSettings.bind(this);\n    this.loadFile = this.loadFile.bind(this);\n    this.removeFile = this.removeFile.bind(this);\n    this.changeNumber = this.changeNumber.bind(this);\n    this.calculateCombinations = this.calculateCombinations.bind(this);\n  }\n\n  setSettings(setting,event){ console.log(event.target.checked);\n    let temp = this.state.settings;\n    if(event.target.value === \"false\")\n        temp[setting] = event.target.checked;\n    else\n        temp[setting] = event.target.value;\n    this.setState({\n      settings: temp\n    })\n  }\n\n  loadFile(event){\n    this.setState({\n      files: this.state.files.concat(URL.createObjectURL(event.target.files[0]))\n    }, this.calculateCombinations)\n  }\n\n  calculateCombinations(){\n    if(this.state.settings.doodle == true && this.isPrime(this.state.numberOfImages - 1)){\n        this.setState({\n            combinations: (this.DobbleCards(this.state.numberOfImages)).map((e) => {return e.map((x, i) => {return this.state.files[x % this.state.files.length]})})\n        })\n    } else\n        this.setState({\n        combinations: this.combinations(this.state.files, this.state.numberOfImages)\n        })\n  }\n  \n    isPrime(num) {\n        for(var i = 2; i < num; i++)\n            if(num % i === 0) return false;\n        return num > 1;\n    }\n\n  combinations(set, k) {\n    var i, j, combs, head, tailcombs;\n    if (k > set.length || k <= 0) {\n        return [];\n    }\n    if (k === set.length) {\n        return [set];\n    }\n    if (k === 1) {\n        combs = [];\n        for (i = 0; i < set.length; i++) {\n            combs.push([set[i]]);\n        }\n        return combs;\n    }\n    combs = [];\n    for (i = 0; i < set.length - k + 1; i++) {\n        head = set.slice(i, i+1);\n        tailcombs = this.combinations(set.slice(i + 1), k - 1);\n        for (j = 0; j < tailcombs.length; j++) {\n            combs.push(head.concat(tailcombs[j]));\n        }\n    }\n    return combs;\n  }\n  \n//function from https://stackoverflow.com/questions/52822827/spot-it-algorithm-js\n  DobbleCards(n) { // n-1 must be prime\n        var cards = [];\n\n        // first card and first category\n        for (var crd = 0; crd < n; crd++) {\n            var symbols = [0];\n            for (var sym = 1; sym < n; sym++) {\n                symbols.push(crd * (n-1) + sym);\n            }\n            cards.push(symbols.slice());\n        }\n\n        // other categories\n        for (var cat = 1; cat < n; cat++) {\n            for (var crd = 0; crd < n-1; crd++) {\n                var symbols = [cat];\n                for (var sym = 1; sym < n; sym++) {\n                    symbols.push(1 + sym * (n-1) + ((cat-1) * (sym-1) + crd) % (n-1));\n                }\n                cards.push(symbols.slice());\n            }\n        }\n    console.log(cards);\n        return cards;\n    }\n//#####################\n    \n  removeFile(i){\n    let temp = this.state.files;\n    temp.splice(i, 1);\n\n    this.setState({\n      files: temp\n    }, this.calculateCombinations)\n  }\n\n  changeNumber(x){\n    this.setState({\n      numberOfImages: x.target.value\n    }, this.calculateCombinations)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Configuration\n          images={this.state.files}\n          loadFile={this.loadFile}\n          removeFile={this.removeFile}\n          changeNumber={this.changeNumber}\n          numberOfImages={this.state.numberOfImages}\n          setSettings={this.setSettings}\n          settings={this.state.settings}\n        />\n        <Preview\n          combinations={this.state.combinations}\n          numberOfImages={this.state.numberOfImages}\n          settings={this.state.settings}\n        />\n      </div>\n    );\n  }\n}\n\nclass Configuration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: []\n    }\n    this.convertToPng = this.convertToPng.bind(this);\n    this.convertToAllPng = this.convertToAllPng.bind(this);\n  }\n\n  convertToPng(){\n    var node = document.getElementById('Preview');\n\n    htmlToImage.toPng(node)\n      .then((dataUrl) => {\n        var link = document.createElement('a');\n        link.download = 'obrazki.png';\n        link.href = dataUrl;\n        link.click();\n      });\n  }\n\n  convertToAllPng(){\n    Array.from(document.getElementById('Preview').children).map((node, i) => {\n      htmlToImage.toPng(node)\n        .then((dataUrl) => {\n          var link = document.createElement('a');\n          link.download = 'image-'+(i+1)+'.png';\n          link.href = dataUrl;\n          link.click();\n        });\n    })\n  }\n\n  render() {\n    return (\n      <div id=\"ConfigurationMenu\">\n        <div>\n          <div>\n            <input type=\"file\" onChange={this.props.loadFile}/>\n          </div>\n        </div>\n        <div>\n          Liczba obrazków: <input type=\"number\" min={1} value={this.props.numberOfImages} onChange={this.props.changeNumber}/>\n        </div>\n        <div id=\"ImagePreview\">\n          {\n            this.props.images.map((e, i) => {\n              return (\n                <div key={i}>\n                  <button onClick={() => this.props.removeFile(i)}>X</button>\n                  <img src={e} alt={\"Photo number \"+i} />\n                </div>\n              )\n            })\n          }\n        </div>\n        <form id=\"SlidersForm\">\n          Padding: <input type=\"range\"  min={1} max={8} step={0.1} value={this.props.settings.padding} onChange={this.props.setSettings.bind(this, \"padding\")}/>\n          Gap: <input type=\"range\"  min={0} max={10} step={0.1} value={this.props.settings.gap} onChange={this.props.setSettings.bind(this, \"gap\")}/>\n          (beta) Tryb doodle: <input type=\"checkbox\" value={this.props.settings.doodle} onChange={this.props.setSettings.bind(this, \"doodle\")}/>\n        </form>\n        <div>\n          <button onClick={this.convertToPng} className=\"menuButton\">Pobierz razem</button>\n          <button onClick={this.convertToAllPng} className=\"menuButton\">Pobierz oddzielnie</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Preview extends React.Component {\n\n  render() {\n\n    return (\n      <div id=\"Preview\">\n        {\n          this.props.combinations.map((combination, index) => {\n            return <div key={index} className=\"card\" style={{\n                gridTemplateColumns: \"repeat(\"+Math.ceil(Math.sqrt(this.props.numberOfImages))+\", auto)\",\n                gridTemplateRows: \"repeat(\"+Math.ceil(Math.sqrt(this.props.numberOfImages))+\", auto)\",\n                gridGap: this.props.settings.gap + \"em\",\n                padding: this.props.settings.padding + \"em\"\n              }}>\n              {\n                combination.map((links, linkIndex) => {\n                  return <img src={links} key={linkIndex} alt=\"links\" style={{transform: \"rotate(\"+Math.ceil(Math.random()*360)+\"deg)\"}}/>\n                })\n              }\n            </div>\n          })\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}